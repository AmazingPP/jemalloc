<NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE>

These branches introduce the CMake build system to jemalloc.

One branch has *only* CMake changes and another branch adds code changes on top as well (optional, but recommended).

Overall, the development/rebase flow goes:

jemalloc/jemalloc branch dev -> mattsta/jemalloc branch add/cmake -> mattsta/jemalloc branch add/cmake-with-code-changes

There's another flat branch with all changes squashed (and these README additions removed) at mattsta/jemalloc branch add/cmake-flat for easier merging without full edit history.

This branch is a *rebase* branch. Future updates to this branch will be hard rebased on top of jemalloc changes and/or other cmake integration changes.  We aren't cross contaminating the development history here with upstream jemalloc development.

REMAINING DECISIONS TO MAKE:

- Keep CMake extra cruft at the top level or put in a {priv, extras, cmake-extras, etc} directory?
- break out non-common settings into to per-platform detection helpers (BuildWin32.cmake, BuildUnix.cmake, etc) so there's less If(WIN32)else() throughout?
- Just use one top-level CMakeLists.txt or break it out into per-directory build files ({src, test/src, test/unit, test/stress, test/integration})?
- Better integrate with CTest? (currently provides 'make test' and 'make check' in Debug builds)
- Better package with CPack? (no integration currently, it can build OS packages and tarballs automatically)

</NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE>

jemalloc is a general purpose malloc(3) implementation that emphasizes
fragmentation avoidance and scalable concurrency support.  jemalloc first came
into use as the FreeBSD libc allocator in 2005, and since then it has found its
way into numerous applications that rely on its predictable behavior.  In 2010
jemalloc development efforts broadened to include developer support features
such as heap profiling and extensive monitoring/tuning hooks.  Modern jemalloc
releases continue to be integrated back into FreeBSD, and therefore versatility
remains critical.  Ongoing development efforts trend toward making jemalloc
among the best allocators for a broad range of demanding applications, and
eliminating/mitigating weaknesses that have practical repercussions for real
world applications.

The COPYING file contains copyright and licensing information.

The INSTALL file contains information on how to configure, build, and install
jemalloc.

The ChangeLog file contains a brief summary of changes for each release.

URL: http://jemalloc.net/
